package com.guiji.clm.service.sip;import com.guiji.clm.constant.ClmConstants;import com.guiji.clm.dao.SipLineExclusiveMapper;import com.guiji.clm.dao.entity.SipLineExclusive;import com.guiji.clm.dao.entity.SipLineExclusiveExample;import com.guiji.clm.dao.entity.SipLineExclusiveExample.Criteria;import com.guiji.clm.enm.SipLineStatusEnum;import com.guiji.clm.exception.ClmErrorEnum;import com.guiji.clm.exception.ClmException;import com.guiji.clm.service.LineService;import com.guiji.clm.service.fee.FeeService;import com.guiji.clm.service.fee.FeeService.FeeOptEnum;import com.guiji.clm.util.ArrayUtils;import com.guiji.clm.vo.SipLineExclusiveQueryCondition;import com.guiji.common.model.Page;import com.guiji.component.result.Result;import com.guiji.dispatch.api.IDispatchPlanOut;import com.guiji.utils.DateUtil;import com.guiji.utils.StrUtils;import lombok.extern.slf4j.Slf4j;import org.assertj.core.util.Lists;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;/** * @Description: 代理第三方线路服务* @Author: weiyunbo* @date 2019年1月23日 上午10:29:39 * @version V1.0  */@Slf4j@Servicepublic class SipLineExclusiveService {	@Autowired	SipLineExclusiveMapper sipLineExclusiveMapper;	@Autowired	FeeService feeService;	@Autowired	IDispatchPlanOut IDispatchPlanOut;			/**	 * 新增/更新独享（自己的）线路	 * @param sipLineExclusive	 * @return	 */	@Transactional	public SipLineExclusive save(SipLineExclusive sipLineExclusive) {		if(sipLineExclusive!=null) {			if(sipLineExclusive.getId()!=null) {				//更新				sipLineExclusive.setUpdateTime(DateUtil.getCurrent4Time());				sipLineExclusiveMapper.updateByPrimaryKey(sipLineExclusive);				if (SipLineStatusEnum.OK.equals(sipLineExclusive.getLineStatus())) {					lineService.updateLineInfo(sipLineExclusive, ClmConstants.UPDATE);				} else {					lineService.updateLineInfo(sipLineExclusive, ClmConstants.DEL);				}			}else {				//新增				sipLineExclusive.setCrtTime(DateUtil.getCurrent4Time());				sipLineExclusive.setUpdateTime(DateUtil.getCurrent4Time());				sipLineExclusiveMapper.insert(sipLineExclusive);				lineService.updateLineInfo(sipLineExclusive, ClmConstants.UPDATE);			}		}		return sipLineExclusive;	}	@Autowired	LineService lineService;	/**	 * 查询某条线路分出去独享线路信息	 * @param sipLineId	 * @return	 */	public List<SipLineExclusive> queryBySipLineId(Integer sipLineId) {		if(sipLineId!=null) {			SipLineExclusiveExample example = new SipLineExclusiveExample();			example.createCriteria().andSipLineIdEqualTo(sipLineId);			return sipLineExclusiveMapper.selectByExample(example);		}		return null;	}			/**	 * 根据主键查询某条线路信息	 * @param id	 * @return	 */	public SipLineExclusive queryById(Integer id) {		if(id!=null) {			return sipLineExclusiveMapper.selectByPrimaryKey(id);		}		return null;	}			/**	 * 根据条件查询用户自己线路信息	 * @param condition	 * @return	 */	public List<SipLineExclusive> querySipLineExclusiveList(SipLineExclusiveQueryCondition condition){		SipLineExclusiveExample example = this.queryExample(condition);		return sipLineExclusiveMapper.selectByExample(example);	}		/**	 * 根据条件查询用户自己线路信息-分页查询	 * @param pageNo	 * @param pageSize	 * @param condition	 * @return	 */	public Page<SipLineExclusive> querySipLineExclusiveForPageByCondition(SipLineExclusiveQueryCondition condition){		int pageNo = condition.getPageNo();		int pageSize = condition.getPageSize();		Page<SipLineExclusive> page = new Page<SipLineExclusive>();		int totalRecord = 0;		int limitStart = (pageNo-1)*pageSize;	//起始条数		int limitEnd = pageSize;	//查询条数		SipLineExclusiveExample example = this.queryExample(condition);		//查询总数		totalRecord = sipLineExclusiveMapper.countByExample(example);		if(totalRecord > 0) {			example.setLimitStart(limitStart);			example.setLimitEnd(limitEnd);			List<SipLineExclusive> list = sipLineExclusiveMapper.selectByExample(example);			page.setRecords(list);		}		page.setPageNo(pageNo);		page.setPageSize(pageSize);		page.setTotal(totalRecord);		return page;	}		/**	 * 查询用户正常线路列表	 * @param userId	 * @return	 */	public List<SipLineExclusive> queryUserNormalSipLineList(String userId) {		if(StrUtils.isNotEmpty(userId)) {			SipLineExclusiveQueryCondition condition = new SipLineExclusiveQueryCondition();			condition.setUserId(userId);	//查询用户线路			condition.setStatusList(Lists.newArrayList(SipLineStatusEnum.OK.getCode())); //正常状态			return this.querySipLineExclusiveList(condition);		}		return null;	}			/**	 * 为某个用户分配线路	 * @param userId	 * @param ids 用户需要分配的线路ids	 */	@Transactional	public void sipExclusiveLineAssign(String userId,String updateUserId,Integer[] ids) {		if(StrUtils.isNotEmpty(userId)) {			//查询用户已绑定的线路列表			int size = 0;			List<SipLineExclusive> assignedLineList = this.queryUserNormalSipLineList(userId);			if((ids==null||ids.length==0) && (assignedLineList==null||assignedLineList.isEmpty())) {				return;			} else {				size = assignedLineList.size();			}			log.info("用户:{}本次变更后的：{}",userId,ids);			if((ids==null||ids.length==0)					&& (assignedLineList!=null&&!assignedLineList.isEmpty())) {				//如果本次要绑定为空，之前绑定不为空，以最新为准，将之前的解绑				log.info("用户：{}之前绑定过，本次没有数据将之前绑定的线路全部删除");				for(SipLineExclusive line:assignedLineList) {					this.unAssignUserExSipLine(updateUserId, line);				}			}else if((ids!=null&&ids.length!=0)					&& (assignedLineList==null||assignedLineList.isEmpty())) {				//如果本次要绑不为空，之前没有绑过，那么直接全绑定				log.info("用户：{}之前没有绑定过..全部新增");				for(Integer id:ids) {					this.assignUserExSipLine(userId, updateUserId, this.queryById(id));				}			}else {				//开始都不为空处理				Integer[] assignedIds = new Integer[size];				log.info("用户:{}存量已分配的线路：{}",userId,assignedIds);				for(int i=0;i<assignedLineList.size();i++) {					assignedIds[i] = assignedLineList.get(i).getId();				}				//本次变更后比之前多出来的ID				List<Integer> addIds = ArrayUtils.getDiffIds(assignedIds,ids);				//本次变更后需要减少的ID				List<Integer> subIds = ArrayUtils.getDiffIds(ids,assignedIds);				log.info("用户:{}增量变更ID：{}",userId,addIds);				log.info("用户:{}减少ID：{}",userId,subIds);				if(addIds!=null&&!addIds.isEmpty()) {					for(Integer id:addIds) {						//新增						this.assignUserExSipLine(userId, updateUserId, this.queryById(id));					}				}				if(subIds!=null&&!subIds.isEmpty()) {					for(Integer id:subIds) {						//新增						this.unAssignUserExSipLine(updateUserId, this.queryById(id));					}				}			}		}	}		/**	 * 将线路分配给用户userid	 * @param userId	 * @param updateUserId	 * @param sipLineExclusive	 */	@Transactional	public void assignUserExSipLine(String userId,String updateUserId,SipLineExclusive sipLineExclusive) {		sipLineExclusive.setUpdateUser(userId);		sipLineExclusive.setBelongUser(userId);		this.save(sipLineExclusive);		//计费准备		feeService.sipFee(FeeOptEnum.UP, sipLineExclusive);	}		/**	 * 线路解绑	 * @param userId	 * @param updateUserId	 * @param sipLineExclusive	 */	@Transactional	public void unAssignUserExSipLine(String updateUserId,SipLineExclusive sipLineExclusive) {		//删除前要检查下是否还有未完成任务，否则计费可能不准确		if(sipLineExclusive.getLineId()!=null && StrUtils.isNotEmpty(sipLineExclusive.getBelongUser())) {			//调用调度中心检查线路是否在使用			Result.ReturnData<Boolean> inUsedFlag = IDispatchPlanOut.lineIsUsedByUserId(sipLineExclusive.getLineId(),Integer.valueOf(sipLineExclusive.getBelongUser()));			if(inUsedFlag.getBody().booleanValue()) {				//在使用抛出异常，不能直接删除				log.error("线路编号:{}仍在调度中心使用中，不能删除",sipLineExclusive.getLineId());				throw new ClmException(ClmErrorEnum.CLM1809310.getErrorCode(),ClmErrorEnum.CLM1809310.getErrorMsg());			}		}		//删除计费		feeService.sipFee(FeeOptEnum.DEL, sipLineExclusive);		//清空		sipLineExclusive.setBelongUser(null);		this.save(sipLineExclusive);	}				/**	 * 根据条件获取查询example	 * @param condition	 * @return	 */	private SipLineExclusiveExample queryExample(SipLineExclusiveQueryCondition condition) {		SipLineExclusiveExample example = new SipLineExclusiveExample();		if(condition != null) {			Criteria criteria = example.createCriteria();			if(condition.getAgentLineId()!=null) {				criteria.andAgentLineIdEqualTo(condition.getAgentLineId());			}			if(condition.getSipLineId()!=null) {				criteria.andSipLineIdEqualTo(condition.getSipLineId());			}			if(condition.getLineId()!=null) {				criteria.andLineIdEqualTo(condition.getLineId());			}			if(StrUtils.isNotEmpty(condition.getLineName())) {				criteria.andLineNameLike("%"+condition.getLineName()+"%");			}			if(condition.getLineType()!=null) {				criteria.andLineTypeEqualTo(condition.getLineType());			}			if(condition.getStatusList()!=null) {				if(condition.getStatusList().size()==1) {					criteria.andLineStatusEqualTo(condition.getStatusList().get(0));				}else {					criteria.andLineStatusIn(condition.getStatusList());				}			}			if(StrUtils.isNotEmpty(condition.getUserId())) {				criteria.andBelongUserEqualTo(condition.getUserId());			}			if(StrUtils.isNotEmpty(condition.getOrgCode())) {				criteria.andBelongOrgCodeEqualTo(condition.getOrgCode());			}		}		example.setOrderByClause(" id desc");		return example;	}	/**	 * 话费分析中查询线路信息	 * @param condition	 * @return	 */	public List<SipLineExclusive> queryUserExclusiveSipLine(SipLineExclusiveQueryCondition condition) {		SipLineExclusiveExample exclusiveExample = new SipLineExclusiveExample();		Criteria criteria = exclusiveExample.createCriteria();		if (condition.getAuthLevel() != null) {			if (ClmConstants.USER_DATA_AUTH_ME == condition.getAuthLevel()) {				criteria.andBelongUserEqualTo(condition.getUserId());			} else {				if (StrUtils.isNotEmpty(condition.getQUserId())) {					criteria.andBelongUserEqualTo(condition.getQUserId());				}				if (ClmConstants.USER_DATA_AUTH_ORG == condition.getAuthLevel()) {					criteria.andBelongOrgCodeEqualTo(condition.getOrgCode());				} else if (ClmConstants.USER_DATA_AUTH_ORGTREE == condition.getAuthLevel()) {					criteria.andBelongOrgCodeLike(condition.getOrgCode() + "%");				}			}		} else {			if (StrUtils.isNotEmpty(condition.getQUserId())) {				criteria.andBelongUserEqualTo(condition.getQUserId());			}		}		if(condition.getStatusList()!=null) {			if(condition.getStatusList().size()==1) {				criteria.andLineStatusEqualTo(condition.getStatusList().get(0));			}else {				criteria.andLineStatusIn(condition.getStatusList());			}		}		return sipLineExclusiveMapper.selectByExample(exclusiveExample);	}}